name: Deploy to Yandex Cloud VM

on:
  push:
    branches:
      - main

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Set up JDK
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin' # Temurin - a new distribution from Adoptium (previously AdoptOpenJDK)
          java-version: '17'

      - name: Install dependencies
        run: mvn clean install
      - name: Log into Docker Hub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Build and push Docker image
        uses: docker/build-push-action@v2
        with:
          context: .
          push: true
          tags: boldr/memebot:latest
          dockerfile: Dockerfile

  deploy-to-vm:
    runs-on: ubuntu-latest
    needs: build-and-push
    steps:
      - name: Install SSH key
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}
      - name: Configure Docker permissions
        run: sudo chmod 666 /var/run/docker.sock
      - name: Add user to docker group
        run: sudo usermod -aG docker $USER && newgrp docker
      - name: Add runner user to docker group
        run: sudo usermod -aG docker runner && newgrp docker
      - name: Deploy to Yandex.Cloud VM
        env:
          VM_USER: ${{ secrets.VM_USER }}
          VM_HOST: ${{ secrets.VM_HOST }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_USER_NAME: ${{ secrets.DB_USER_NAME }}
          BOT_TOKEN: ${{ secrets.BOT_TOKEN }}
          DB_HOST: ${{ secrets.DB_HOST }}
        run: |
          echo "Installing Docker (if not installed)"
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "curl -fsSL https://get.docker.com | sh"

          echo "Log in to Docker Hub"
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "sudo docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}"

          echo "Pulling Docker image"
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "sudo docker pull boldr/memebot:latest"

          echo "Stopping existing container (if any)"
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "sudo docker stop memebot || true"
          
          echo "Removing existing container (if any)"
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null ${{ secrets.VM_USER }}@${{ secrets.VM_HOST }} "sudo docker rm memebot || true"

          echo "Starting new container"
          ssh -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $VM_USER@$VM_HOST "sudo docker run --name memebot --restart always -d -e db_password='$DB_PASSWORD' -e db_user_name='$DB_USER_NAME' -e bot_token='$BOT_TOKEN' -e db_host='$DB_HOST' boldr/memebot:latest"